<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimMetrics</name>
    </assembly>
    <members>
        <member name="T:SimMetricsUtilities.TokeniserSGram3">
            <summary>
            implementaton of the Sgram tokeniser
            </summary>
        </member>
        <member name="T:SimMetricsUtilities.TokeniserQGram3">
            <summary>
            implementaton of the Bigram tokeniser
            </summary>
        </member>
        <member name="T:SimMetricsApi.AbstractTokeniserQGramN">
            <summary>
            Implements a QGram Tokeniser to cope with all gram sizes.
            </summary>
            <remarks>The cci value determines at what level the skip characters
            are gathered. This is a variation of the normal QGram analysis when
            character pairs are created having skipped characters in the words.</remarks>
        </member>
        <member name="T:SimMetricsApi.ITokeniser">
            <summary>
            InterfaceTokeniser interface for a Tokeniser class.
            </summary>
        </member>
        <member name="M:SimMetricsApi.ITokeniser.Tokenize(System.String)">
            <summary>
            Return tokenized version of a string.
            </summary>
            <param name="word"></param>
            <returns>tokenized version of a string</returns>
        </member>
        <member name="M:SimMetricsApi.ITokeniser.TokenizeToSet(System.String)">
            <summary>
            Return tokenized version of a string as a set.
            </summary>
            <param name="word"></param>
            <returns>tokenized version of a string as a set</returns>
        </member>
        <member name="P:SimMetricsApi.ITokeniser.Delimiters">
            <summary>
            displays the delimitors used - (if applicable).
            </summary>
        </member>
        <member name="P:SimMetricsApi.ITokeniser.ShortDescriptionString">
            <summary>
            displays the tokenisation method.
            </summary>
        </member>
        <member name="P:SimMetricsApi.ITokeniser.StopWordHandler">
            <summary>
            gets the stop word handler used.
            </summary>
        </member>
        <member name="M:SimMetricsApi.AbstractTokeniserQGramN.Tokenize(System.String)">
            <summary>
            Return tokenized version of a string.
            </summary>
            <param name="word">input</param>
            <returns>tokenized version of a string</returns>
        </member>
        <member name="M:SimMetricsApi.AbstractTokeniserQGramN.Tokenize(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            full version of Tokenise which allows for different token lengths 
            as well as the characterCombinationIndexValue error level as well.
            </summary>
            <param name="word">word to tokenise</param>
            <param name="extended">whether to generate extended tokens</param>
            <param name="tokenLength">length of tokens</param>
            <param name="characterCombinationIndexValue">error level for skip tokens</param>
            <returns>collection of tokens</returns>
        </member>
        <member name="M:SimMetricsApi.AbstractTokeniserQGramN.TokenizeToSet(System.String)">
            <summary>
            Return tokenized set of a string.
            </summary>
            <param name="word">input</param>
            <returns>tokenized version of a string as a set</returns>
        </member>
        <member name="P:SimMetricsApi.AbstractTokeniserQGramN.CharacterCombinationIndex">
            <summary>
            CCI - error level used for the sgram analysis. 
            </summary>
            <description>A value of 1 means the sgram will skip a letter when generating the tokens</description>
        </member>
        <member name="P:SimMetricsApi.AbstractTokeniserQGramN.Delimiters">
            <summary>
            displays the delimiters used  - ie none.
            </summary>
        </member>
        <member name="P:SimMetricsApi.AbstractTokeniserQGramN.QGramLength">
            <summary>
            length of the qgram tokens to create
            </summary>
        </member>
        <member name="P:SimMetricsApi.AbstractTokeniserQGramN.ShortDescriptionString">
            <summary>
            displays the tokenisation method.
            </summary>
        </member>
        <member name="P:SimMetricsApi.AbstractTokeniserQGramN.StopWordHandler">
            <summary>
             the stop word handler used.
            </summary>
        </member>
        <member name="P:SimMetricsApi.AbstractTokeniserQGramN.SuppliedWord">
            <summary>
            supplied word
            </summary>
        </member>
        <member name="P:SimMetricsApi.AbstractTokeniserQGramN.TokenUtilities">
            <summary>
            class containing token utilities
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserQGram3.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserQGram3.Tokenize(System.String)">
            <summary>
            Return tokenized version of a string.
            </summary>
            <param name="word">input</param>
            <returns>tokenized version of a string</returns>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserQGram3.ToString">
            <summary>
            override the ToString method to give accurate information on current settings
            </summary>
            <returns>details of current tokeniser</returns>
        </member>
        <member name="P:SimMetricsUtilities.TokeniserQGram3.ShortDescriptionString">
            <summary>
            displays the tokenisation method.
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserSGram3.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserSGram3.ToString">
            <summary>
            override the ToString method to give accurate information on current settings
            </summary>
            <returns>details of current tokeniser</returns>
        </member>
        <member name="P:SimMetricsUtilities.TokeniserSGram3.ShortDescriptionString">
            <summary>
            displays the tokenisation method.
            </summary>
        </member>
        <member name="T:SimMetricsMetricUtilities.ChapmanMeanLength">
            <summary>
             implements Chapman Mean Length metric
            </summary>
        </member>
        <member name="T:SimMetricsApi.AbstractStringMetric">
            <summary>
            base class which all metrics inherit from.
            </summary>
            <remarks>This class implemented a few basic methods and then leaves the others to
            be implemented by the similarity metric itself.</remarks>
        </member>
        <member name="T:SimMetricsApi.IStringMetric">
            <summary>
            implements an interface for the string metrics
            </summary>
        </member>
        <member name="M:SimMetricsApi.IStringMetric.GetSimilarity(System.String,System.String)">
            <summary>
            returns a similarity measure of the string comparison.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>a double between zero to one (zero = no similarity, one = matching strings)</returns>
        </member>
        <member name="M:SimMetricsApi.IStringMetric.GetSimilarityExplained(System.String,System.String)">
            <summary> gets a div class xhtml similarity explaining the operation of the metric.
            
            </summary>
            <param name="firstWord">string 1
            </param>
            <param name="secondWord">string 2
            
            </param>
            <returns> a div class html section detailing the metric operation.
            </returns>
        </member>
        <member name="M:SimMetricsApi.IStringMetric.GetSimilarityTimingActual(System.String,System.String)">
            <summary>
            gets the actual time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the actual time in milliseconds taken to perform the similarity measure</returns>
            <remarks>This call takes as long as the similarity metric to perform so should not be done in normal cercumstances.</remarks>
        </member>
        <member name="M:SimMetricsApi.IStringMetric.GetSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            gets the estimated time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the estimated time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="M:SimMetricsApi.IStringMetric.GetUnnormalisedSimilarity(System.String,System.String)">
            <summary> 
            gets the un-normalised similarity measure of the metric for the given strings.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns> returns the score of the similarity measure (un-normalised)</returns>
        </member>
        <member name="P:SimMetricsApi.IStringMetric.LongDescriptionString">
            <summary>
            returns a long string of the string metric description.
            </summary>
        </member>
        <member name="P:SimMetricsApi.IStringMetric.ShortDescriptionString">
            <summary>
            returns a string of the string metric name.
            </summary>
        </member>
        <member name="M:SimMetricsApi.AbstractStringMetric.BatchCompareSet(System.String[],System.String)">
            <summary>
            does a batch comparison of the set of strings with the given
            comparator string returning an array of results equal in length
            to the size of the given set of strings to test.
            </summary>
            <param name="setRenamed">an array of strings to test against the comparator string</param>
            <param name="comparator">the comparator string to test the array against</param>
            <returns>an array of results equal in length to the size of the given set of strings to test.</returns>
        </member>
        <member name="M:SimMetricsApi.AbstractStringMetric.BatchCompareSets(System.String[],System.String[])">
            <summary>
            does a batch comparison of one set of strings against another set
            of strings returning an array of results equal in length
            to the minimum size of the given sets of strings to test.
            </summary>
            <param name="firstSet">an array of strings to test</param>
            <param name="secondSet">an array of strings to test the first array against</param>
            <returns>an array of results equal in length to the minimum size of the given sets of strings to test.</returns>
        </member>
        <member name="M:SimMetricsApi.AbstractStringMetric.GetSimilarity(System.String,System.String)">
            <summary>
            gets the similarity measure of the metric for the given strings.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>implemented version will return score between 0 and 1</returns>
        </member>
        <member name="M:SimMetricsApi.AbstractStringMetric.GetSimilarityExplained(System.String,System.String)">
            <summary> gets a div class xhtml similarity explaining the operation of the metric.</summary>
            <param name="firstWord">string 1</param>
            <param name="secondWord">string 2</param>
            <returns> a div class html section detailing the metric operation.</returns>
        </member>
        <member name="M:SimMetricsApi.AbstractStringMetric.GetSimilarityTimingActual(System.String,System.String)">
            <summary>
            gets the actual time in milliseconds it takes to perform a similarity timing.
            This call takes as long as the similarity metric to perform so should not be done in normal circumstances.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the actual time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="M:SimMetricsApi.AbstractStringMetric.GetSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            gets the estimated time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the estimated time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="M:SimMetricsApi.AbstractStringMetric.GetUnnormalisedSimilarity(System.String,System.String)">
            <summary> 
            gets the un-normalised similarity measure of the metric for the given strings.</summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns> returns the score of the similarity measure (un-normalised)</returns>
        </member>
        <member name="P:SimMetricsApi.AbstractStringMetric.LongDescriptionString">
            <summary>
            reports the metric type.
            </summary>
        </member>
        <member name="P:SimMetricsApi.AbstractStringMetric.ShortDescriptionString">
            <summary>
            reports the metric type.
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.ChapmanMeanLength.chapmanMeanLengthMaxString">
            <summary>
            defines the internal max string length beyond which 1.0 is always returned.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.ChapmanMeanLength.GetSimilarity(System.String,System.String)">
            <summary>
            gets the similarity of the two strings using ChapmanMeanLength
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>a value between 0-1 of the similarity</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.ChapmanMeanLength.GetSimilarityExplained(System.String,System.String)">
            <summary> gets a div class xhtml similarity explaining the operation of the metric.</summary>
            <param name="firstWord">string 1</param>
            <param name="secondWord">string 2</param>
            <returns> a div class html section detailing the metric operation.</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.ChapmanMeanLength.GetSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            gets the estimated time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the estimated time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.ChapmanMeanLength.GetUnnormalisedSimilarity(System.String,System.String)">
            <summary> 
            gets the un-normalised similarity measure of the metric for the given strings.</summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns> returns the score of the similarity measure (un-normalised)</returns>
        </member>
        <member name="P:SimMetricsMetricUtilities.ChapmanMeanLength.LongDescriptionString">
            <summary>
            returns the long string identifier for the metric.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.ChapmanMeanLength.ShortDescriptionString">
            <summary>
            returns the string identifier for the metric.
            </summary>
        </member>
        <member name="T:SimMetricsApi.AbstractSubstitutionCost">
            <summary>
            AbstractSubstitutionCost implements a abstract class for substiution costs
            </summary>
        </member>
        <member name="T:SimMetricsApi.ISubstitutionCost">
            <summary>
            is an interface for a cost function d(i,j).
            </summary>
        </member>
        <member name="M:SimMetricsApi.ISubstitutionCost.GetCost(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            get cost between characters.
            </summary>
            <param name="firstWord">the firstWord to evaluate the cost</param>
            <param name="firstWordIndex">the index within the firstWord to test</param>
            <param name="secondWord">the secondWord to evaluate the cost</param>
            <param name="secondWordIndex">the index within the secondWord to test</param>
            <returns></returns>
        </member>
        <member name="P:SimMetricsApi.ISubstitutionCost.MaxCost">
            <summary>
            returns the maximum possible cost.
            </summary>
        </member>
        <member name="P:SimMetricsApi.ISubstitutionCost.MinCost">
            <summary>
            returns the minimum possible cost.
            </summary>
        </member>
        <member name="P:SimMetricsApi.ISubstitutionCost.ShortDescriptionString">
            <summary>
            returns the name of the cost function.
            </summary>
        </member>
        <member name="M:SimMetricsApi.AbstractSubstitutionCost.GetCost(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            get cost between characters.
            </summary>
            <param name="firstWord">the firstWord to evaluate the cost</param>
            <param name="firstWordIndex">the index within the firstWord to test</param>
            <param name="secondWord">the secondWord to evaluate the cost</param>
            <param name="secondWordIndex">the index within the string2 to test</param>
            <returns></returns>
        </member>
        <member name="P:SimMetricsApi.AbstractSubstitutionCost.MaxCost">
            <summary>
            returns the maximum possible cost.
            </summary>
        </member>
        <member name="P:SimMetricsApi.AbstractSubstitutionCost.MinCost">
            <summary>
            returns the minimum possible cost.
            </summary>
        </member>
        <member name="P:SimMetricsApi.AbstractSubstitutionCost.ShortDescriptionString">
            <summary>
            returns the name of the cost function.
            </summary>
        </member>
        <member name="T:SimMetricsUtilities.TokeniserSGram2">
            <summary>
            implementaton of the Sgram tokeniser
            </summary>
        </member>
        <member name="T:SimMetricsUtilities.TokeniserQGram2">
            <summary>
            implementaton of the Bigram tokeniser
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserQGram2.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserQGram2.Tokenize(System.String)">
            <summary>
            Return tokenized version of a string.
            </summary>
            <param name="word">input</param>
            <returns>tokenized version of a string</returns>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserQGram2.ToString">
            <summary>
            override the ToString method to give accurate information on current settings
            </summary>
            <returns>details of current tokeniser</returns>
        </member>
        <member name="P:SimMetricsUtilities.TokeniserQGram2.ShortDescriptionString">
            <summary>
            displays the tokenisation method.
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserSGram2.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserSGram2.ToString">
            <summary>
            override the ToString method to give accurate information on current settings
            </summary>
            <returns>details of current tokeniser</returns>
        </member>
        <member name="P:SimMetricsUtilities.TokeniserSGram2.ShortDescriptionString">
            <summary>
            displays the tokenisation method.
            </summary>
        </member>
        <member name="T:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine">
            <summary>
            implements the smith waterman with gotoh extension using a windowed affine gap.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine.#ctor">
            <summary>
            constructor - default (empty).
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="affineGapWindowSize">the size of the affine gap window to use</param>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine.#ctor(SimMetricsApi.AbstractAffineGapCost)">
            <summary>
            constructor
            </summary>
            <param name="gapCostFunction">the gap cost function</param>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine.#ctor(SimMetricsApi.AbstractAffineGapCost,System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="gapCostFunction">the gap cost function</param>
            <param name="affineGapWindowSize">the size of the affine gap window to use</param>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine.#ctor(SimMetricsApi.AbstractAffineGapCost,SimMetricsApi.AbstractSubstitutionCost)">
            <summary>
            constructor
            </summary>
            <param name="gapCostFunction">the gap cost function</param>
            <param name="costFunction">the cost function to use</param>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine.#ctor(SimMetricsApi.AbstractAffineGapCost,SimMetricsApi.AbstractSubstitutionCost,System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="gapCostFunction">the gap cost function</param>
            <param name="costFunction">the cost function to use</param>
            <param name="affineGapWindowSize">the size of the affine gap window to use</param>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine.#ctor(SimMetricsApi.AbstractSubstitutionCost)">
            <summary>
            constructor
            </summary>
            <param name="costFunction">the cost function to use</param>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine.#ctor(SimMetricsApi.AbstractSubstitutionCost,System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="costFunction">the cost function to use</param>
            <param name="affineGapWindowSize">the size of the affine gap window to use</param>
        </member>
        <member name="F:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine.dCostFunction">
            <summary>
            the private cost function used in the SmithWatermanGotoh distance.
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine.estimatedTimingConstant">
            <summary>
            a constant for calculating the estimated timing cost.
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine.gGapFunction">
            <summary>
            the private cost function for affine gaps.
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine.windowSize">
            <summary>
            private field for the maximum affine gap window size.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine.GetSimilarity(System.String,System.String)">
            <summary>
            gets the similarity of the two strings using Smith-Waterman-Gotoh distance.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>a value between 0-1 of the similarity</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine.GetSimilarityExplained(System.String,System.String)">
            <summary> gets a div class xhtml similarity explaining the operation of the metric.</summary>
            <param name="firstWord">string 1</param>
            <param name="secondWord">string 2</param>
            <returns> a div class html section detailing the metric operation.</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine.GetSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            gets the estimated time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the estimated time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine.GetUnnormalisedSimilarity(System.String,System.String)">
            <summary> 
            gets the un-normalised similarity measure of the metric for the given strings.</summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns> returns the score of the similarity measure (un-normalised)</returns>
        </member>
        <member name="P:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine.DCostFunction">
            <summary>
            get the d(i,j) cost function.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine.GGapFunction">
            <summary>
            get the g gap cost function.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine.LongDescriptionString">
            <summary>
            returns the long string identifier for the metric.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.SmithWatermanGotohWindowedAffine.ShortDescriptionString">
            <summary>
            returns the string identifier for the metric.
            </summary>
        </member>
        <member name="T:SimMetricsUtilities.MathFunctions">
            <summary>
            MathFuncs implements a number of handy maths functions.
             </summary>
        </member>
        <member name="M:SimMetricsUtilities.MathFunctions.MaxOf3(System.Double,System.Double,System.Double)">
            <summary>
            returns the max of three numbers.
            </summary>
            <param name="firstNumber">first number to test</param>
            <param name="secondNumber">second number to test</param>
            <param name="thirdNumber">third number to test</param>
            <returns>the max of three numbers.</returns>
        </member>
        <member name="M:SimMetricsUtilities.MathFunctions.MaxOf3(System.Int32,System.Int32,System.Int32)">
            <summary>
            returns the max of three numbers.
            </summary>
            <param name="firstNumber">first number to test</param>
            <param name="secondNumber">second number to test</param>
            <param name="thirdNumber">third number to test</param>
            <returns>the max of three numbers.</returns>
        </member>
        <member name="M:SimMetricsUtilities.MathFunctions.MaxOf4(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            returns the max of four numbers.
            </summary>
            <param name="firstNumber">first number to test</param>
            <param name="secondNumber">second number to test</param>
            <param name="thirdNumber">third number to test</param>
            <param name="fourthNumber">fourth number to test</param>
            <returns>the max of four numbers.</returns>
        </member>
        <member name="M:SimMetricsUtilities.MathFunctions.MinOf3(System.Double,System.Double,System.Double)">
            <summary>
            returns the min of three numbers.
            </summary>
            <param name="firstNumber">first number to test</param>
            <param name="secondNumber">second number to test</param>
            <param name="thirdNumber">third number to test</param>
            <returns>the min of three numbers.</returns>
        </member>
        <member name="M:SimMetricsUtilities.MathFunctions.MinOf3(System.Int32,System.Int32,System.Int32)">
            <summary>
            returns the min of three numbers.
            </summary>
            <param name="firstNumber">first number to test</param>
            <param name="secondNumber">second number to test</param>
            <param name="thirdNumber">third number to test</param>
            <returns>the min of three numbers.</returns>
        </member>
        <member name="T:SimMetricsUtilities.TokeniserSGram3Extended">
            <summary>
            implementation of a SGram tokeniser using extended logic
            </summary>
        </member>
        <member name="T:SimMetricsUtilities.TokeniserQGram3Extended">
            <summary>
            implementation of a Bigram tokeniser using extended logic
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserQGram3Extended.Tokenize(System.String)">
            <summary>
            Return tokenized version of a string.
            </summary>
            <param name="word">input</param>
            <returns>tokenized version of a string</returns>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserQGram3Extended.ToString">
            <summary>
            override the ToString method to give accurate information on current settings
            </summary>
            <returns>details of current tokeniser</returns>
        </member>
        <member name="P:SimMetricsUtilities.TokeniserQGram3Extended.ShortDescriptionString">
            <summary>
            displays the tokenisation method.
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserSGram3Extended.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserSGram3Extended.ToString">
            <summary>
            override the ToString method to give accurate information on current settings
            </summary>
            <returns>details of current tokeniser</returns>
        </member>
        <member name="P:SimMetricsUtilities.TokeniserSGram3Extended.ShortDescriptionString">
            <summary>
            displays the tokenisation method.
            </summary>
        </member>
        <member name="T:SimMetricsMetricUtilities.CosineSimilarity">
            <summary>
            
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.CosineSimilarity.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.CosineSimilarity.#ctor(SimMetricsApi.ITokeniser)">
            <summary>
            constructor
            </summary>
            <param name="tokeniserToUse">the tokeniser to use should a different tokeniser be required</param>
        </member>
        <member name="F:SimMetricsMetricUtilities.CosineSimilarity.estimatedTimingConstant">
            <summary>
            a constant for calculating the estimated timing cost.
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.CosineSimilarity.tokeniser">
            <summary>
            private tokeniser for tokenisation of the query strings.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.CosineSimilarity.GetSimilarity(System.String,System.String)">
            <summary>
            gets the similarity of the two strings using CosineSimilarity.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>a value between 0-1 of the similarity</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.CosineSimilarity.GetSimilarityExplained(System.String,System.String)">
            <summary> gets a div class xhtml similarity explaining the operation of the metric.</summary>
            <param name="firstWord">string 1</param>
            <param name="secondWord">string 2</param>
            <returns> a div class html section detailing the metric operation.</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.CosineSimilarity.GetSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            gets the estimated time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the estimated time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.CosineSimilarity.GetUnnormalisedSimilarity(System.String,System.String)">
            <summary> 
            gets the un-normalised similarity measure of the metric for the given strings.</summary>
            <param name="firstWord">first word</param>
            <param name="secondWord">second word</param>
            <returns> returns the score of the similarity measure (un-normalised)</returns>
        </member>
        <member name="P:SimMetricsMetricUtilities.CosineSimilarity.LongDescriptionString">
            <summary>
            returns the long string identifier for the metric.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.CosineSimilarity.ShortDescriptionString">
            <summary>
            returns the string identifier for the metric.
            </summary>
        </member>
        <member name="T:SimMetricsMetricUtilities.SmithWatermanGotoh">
            <summary>
            implements the Gotoh extension of the smith waterman method incorporating affine gaps in the strings
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.SmithWatermanGotoh.affineGapWindowSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.SmithWatermanGotoh.estimatedTimingConstant">
            <summary>
             a constant for calculating the estimated timing cost.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWatermanGotoh.#ctor">
            <summary>
            constructor - default (empty).
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWatermanGotoh.#ctor(SimMetricsApi.AbstractAffineGapCost)">
            <summary>
            constructor
            </summary>
            <param name="gapCostFunction">the gap cost function</param>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWatermanGotoh.#ctor(SimMetricsApi.AbstractAffineGapCost,SimMetricsApi.AbstractSubstitutionCost)">
            <summary>
            constructor
            </summary>
            <param name="gapCostFunction">the gap cost function</param>
            <param name="costFunction">the cost function to use</param>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWatermanGotoh.#ctor(SimMetricsApi.AbstractSubstitutionCost)">
            <summary>
            constructor
            </summary>
            <param name="costFunction">the cost function to use</param>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWatermanGotoh.GetSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            gets the estimated time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the estimated time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="P:SimMetricsMetricUtilities.SmithWatermanGotoh.LongDescriptionString">
            <summary>
            returns the long string identifier for the metric.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.SmithWatermanGotoh.ShortDescriptionString">
            <summary>
            returns the string identifier for the metric.
            </summary>
        </member>
        <member name="T:SimMetricsMetricUtilities.OverlapCoefficient">
            <summary>
            
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.OverlapCoefficient.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.OverlapCoefficient.#ctor(SimMetricsApi.ITokeniser)">
            <summary>
            Constructor
            </summary>
            <param name="tokeniserToUse">the tokeniser to use should a different tokeniser be required</param>
        </member>
        <member name="F:SimMetricsMetricUtilities.OverlapCoefficient.estimatedTimingConstant">
            <summary>
            a constant for calculating the estimated timing cost.
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.OverlapCoefficient.tokeniser">
            <summary>
            private tokeniser for tokenisation of the query strings.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.OverlapCoefficient.GetSimilarity(System.String,System.String)">
            <summary>
            gets the similarity of the two strings using OverlapCoefficient
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>a value between 0-1 of the similarity</returns>
            <remarks>overlap_coefficient(q,r) = ( | q and r | ) / min{ | q | , | r | }.</remarks>
        </member>
        <member name="M:SimMetricsMetricUtilities.OverlapCoefficient.GetSimilarityExplained(System.String,System.String)">
            <summary> gets a div class xhtml similarity explaining the operation of the metric.</summary>
            <param name="firstWord">string 1</param>
            <param name="secondWord">string 2</param>
            <returns> a div class html section detailing the metric operation.</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.OverlapCoefficient.GetSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            gets the estimated time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the estimated time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.OverlapCoefficient.GetUnnormalisedSimilarity(System.String,System.String)">
            <summary> 
            gets the un-normalised similarity measure of the metric for the given strings.</summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns> returns the score of the similarity measure (un-normalised)</returns>
        </member>
        <member name="P:SimMetricsMetricUtilities.OverlapCoefficient.LongDescriptionString">
            <summary>
             returns the long string identifier for the metric.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.OverlapCoefficient.ShortDescriptionString">
            <summary>
            returns the string identifier for the metric.
            </summary>
        </member>
        <member name="T:SimMetricsApi.AbstractAffineGapCost">
            <summary>
             abstract class used as a base for all affine gap classes
            </summary>
        </member>
        <member name="T:SimMetricsApi.IAffineGapCost">
            <summary>
            defines an Interface for AffineGapCost functions to be interchanged
            </summary>
        </member>
        <member name="M:SimMetricsApi.IAffineGapCost.GetCost(System.String,System.Int32,System.Int32)">
            <summary>
            get cost between characters.
            </summary>
            <param name="textToGap">the string to get the cost of a gap</param>
            <param name="stringIndexStartGap">the index within the string to test a start gap from</param>
            <param name="stringIndexEndGap">the index within the string to test a end gap to</param>
            <returns></returns>
        </member>
        <member name="P:SimMetricsApi.IAffineGapCost.MaxCost">
            <summary>
            returns the maximum possible cost.
            </summary>
        </member>
        <member name="P:SimMetricsApi.IAffineGapCost.MinCost">
            <summary>
            returns the minimum possible cost.
            </summary>
        </member>
        <member name="P:SimMetricsApi.IAffineGapCost.ShortDescriptionString">
            <summary>
            returns the name of the affine gap cost function.
            </summary>
        </member>
        <member name="M:SimMetricsApi.AbstractAffineGapCost.GetCost(System.String,System.Int32,System.Int32)">
            <summary>
            get cost between characters.
            </summary>
            <param name="textToGap">the string to get the cost of a gap</param>
            <param name="stringIndexStartGap">the index within the string to test a start gap from</param>
            <param name="stringIndexEndGap">the index within the string to test a end gap to</param>
            <returns>the cost of a Gap G</returns>
        </member>
        <member name="P:SimMetricsApi.AbstractAffineGapCost.MaxCost">
            <summary>
            returns the maximum possible cost.
            </summary>
        </member>
        <member name="P:SimMetricsApi.AbstractAffineGapCost.MinCost">
            <summary>
            returns the minimum possible cost.
            </summary>
        </member>
        <member name="P:SimMetricsApi.AbstractAffineGapCost.ShortDescriptionString">
            <summary>
            returns the name of the cost function.
            </summary>
        </member>
        <member name="T:SimMetricsUtilities.DummyStopTermHandler">
            <summary>
            DummyStopTermHandler implements a dummy stop word handling function whereby no stopwords are considered.
            </summary>
        </member>
        <member name="T:SimMetricsApi.ITermHandler">
            <summary>
            defines an interface for stop word handlers.
            </summary>
        </member>
        <member name="M:SimMetricsApi.ITermHandler.AddWord(System.String)">
            <summary>
            adds a Word to the interface.
            </summary>
            <param name="termToAdd">termToAdd the Word to add</param>
        </member>
        <member name="M:SimMetricsApi.ITermHandler.IsWord(System.String)">
            <summary>
            isStopWord determines if a given term is a word or not.
            </summary>
            <param name="termToTest">termToTest the term to test</param>
            <returns>true if a stopword false otherwise.</returns>
        </member>
        <member name="M:SimMetricsApi.ITermHandler.RemoveWord(System.String)">
            <summary>
            removes the given word from the list.
            </summary>
            <param name="termToRemove">termToRemove the word term to remove</param>
        </member>
        <member name="P:SimMetricsApi.ITermHandler.NumberOfWords">
            <summary>
            gets the number of stopwords in the list.
            </summary>
        </member>
        <member name="P:SimMetricsApi.ITermHandler.ShortDescriptionString">
            <summary>
            gets the short description string of the stop word handler used.
            </summary>
        </member>
        <member name="P:SimMetricsApi.ITermHandler.WordsAsBuffer">
            <summary>
            gets the words as an output string buffer.
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.DummyStopTermHandler.AddWord(System.String)">
            <summary>
            adds a word to the intewrface.
            </summary>
            <param name="termToAdd">termToAdd the word to add</param>
        </member>
        <member name="M:SimMetricsUtilities.DummyStopTermHandler.IsWord(System.String)">
            <summary>
            isStopWord determines if a given term is a stop word or not.
            </summary>
            <param name="termToTest">termToTest the term to test</param>
            <returns>always returns false.</returns>
        </member>
        <member name="M:SimMetricsUtilities.DummyStopTermHandler.RemoveWord(System.String)">
            <summary>
            removes the given stopword from the list.
            </summary>
            <param name="termToRemove">termToRemove the stopword term to remove</param>
        </member>
        <member name="P:SimMetricsUtilities.DummyStopTermHandler.NumberOfWords">
            <summary>
            gets the number of stopwords in the list.
            </summary>
        </member>
        <member name="P:SimMetricsUtilities.DummyStopTermHandler.ShortDescriptionString">
            <summary>
            displays the stopWordHandler method.
            </summary>
        </member>
        <member name="P:SimMetricsUtilities.DummyStopTermHandler.WordsAsBuffer">
            <summary>
            gets the stopwords as a stringBuffer.
            </summary>
        </member>
        <member name="T:SimMetricsMetricUtilities.EuclideanDistance">
            <summary>
            
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.EuclideanDistance.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.EuclideanDistance.#ctor(SimMetricsApi.ITokeniser)">
            <summary>
            constructor
            </summary>
            <param name="tokeniserToUse">the tokeniser to use should a different tokeniser be required</param>
        </member>
        <member name="F:SimMetricsMetricUtilities.EuclideanDistance.estimatedTimingConstant">
            <summary>
            a constant for calculating the estimated timing cost.
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.EuclideanDistance.tokeniser">
            <summary>
            private tokeniser for tokenisation of the query strings.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.EuclideanDistance.GetEuclidDistance(System.String,System.String)">
            <summary>
            gets the actual euclidean distance ie not the value between 0-1.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the actual euclidean distance</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.EuclideanDistance.GetSimilarity(System.String,System.String)">
            <summary>
            gets the similarity of the two strings using EuclideanDistance
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>a value between 0-1 of the similarity 1.0 identical</returns>
            <remarks>the 0-1 return is calcualted from the maximum possible Euclidean
            distance between the strings from the number of terms within them.</remarks>
        </member>
        <member name="M:SimMetricsMetricUtilities.EuclideanDistance.GetSimilarityExplained(System.String,System.String)">
            <summary> gets a div class xhtml similarity explaining the operation of the metric.</summary>
            <param name="firstWord">string 1</param>
            <param name="secondWord">string 2</param>
            <returns> a div class html section detailing the metric operation.</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.EuclideanDistance.GetSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            gets the estimated time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the estimated time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.EuclideanDistance.GetUnnormalisedSimilarity(System.String,System.String)">
            <summary> 
            gets the un-normalised similarity measure of the metric for the given strings.</summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns> returns the score of the similarity measure (un-normalised)</returns>
        </member>
        <member name="P:SimMetricsMetricUtilities.EuclideanDistance.LongDescriptionString">
            <summary>
            returns the long string identifier for the metric.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.EuclideanDistance.ShortDescriptionString">
            <summary>
            returns the string identifier for the metric.
            </summary>
        </member>
        <member name="T:SimMetricsMetricUtilities.ChapmanLengthDeviation">
            <summary>
            implements a metric determined by the difference in string lengths
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.ChapmanLengthDeviation.GetSimilarity(System.String,System.String)">
            <summary>
            gets the similarity of the two strings using ChapmanLengthDeviation
            </summary>
            <remarks>this is simply a ratio of difference in string lengths between those compared.</remarks>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>a value between 0-1 of the similarity</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.ChapmanLengthDeviation.GetSimilarityExplained(System.String,System.String)">
            <summary> gets a div class xhtml similarity explaining the operation of the metric.</summary>
            <param name="firstWord">string 1</param>
            <param name="secondWord">string 2</param>
            <returns> a div class html section detailing the metric operation.</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.ChapmanLengthDeviation.GetSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            gets the estimated time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the estimated time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.ChapmanLengthDeviation.GetUnnormalisedSimilarity(System.String,System.String)">
            <summary> 
            gets the un-normalised similarity measure of the metric for the given strings.</summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns> returns the score of the similarity measure (un-normalised)</returns>
        </member>
        <member name="P:SimMetricsMetricUtilities.ChapmanLengthDeviation.LongDescriptionString">
            <summary>
            returns the long string identifier for the metric.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.ChapmanLengthDeviation.ShortDescriptionString">
            <summary>
            returns the string identifier for the metric.
            </summary>
        </member>
        <member name="T:SimMetricsUtilities.TokeniserQGram2Extended">
            <summary>
            implementation of a Bigram tokeniser using extended logic
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserQGram2Extended.Tokenize(System.String)">
            <summary>
            Return tokenized version of a string.
            </summary>
            <param name="word">input</param>
            <returns>tokenized version of a string</returns>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserQGram2Extended.ToString">
            <summary>
            override the ToString method to give accurate information on current settings
            </summary>
            <returns>details of current tokeniser</returns>
        </member>
        <member name="P:SimMetricsUtilities.TokeniserQGram2Extended.ShortDescriptionString">
            <summary>
            displays the tokenisation method.
            </summary>
        </member>
        <member name="T:SimMetricsMetricUtilities.JaccardSimilarity">
            <summary>
            
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.JaccardSimilarity.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.JaccardSimilarity.#ctor(SimMetricsApi.ITokeniser)">
            <summary>
            the tokeniser to use should a different tokeniser be required
            </summary>
            <param name="tokeniserToUse"></param>
        </member>
        <member name="F:SimMetricsMetricUtilities.JaccardSimilarity.estimatedTimingConstant">
            <summary>
            a constant for calculating the estimated timing cost.
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.JaccardSimilarity.tokeniser">
            <summary>
            private tokeniser for tokenisation of the query strings.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.JaccardSimilarity.GetSimilarity(System.String,System.String)">
            <summary>
            gets the similarity of the two strings using JaccardSimilarity.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>a value between 0-1 of the similarity</returns>
            <remarks>Each instance is represented as a Jaccard vector similarity function. The Jaccard between two vectors X and Y is
            (X*Y) / (|X||Y|-(X*Y))
            where (X*Y) is the inner product of X and Y, and |X| = (X*X)^1/2, i.e. the Euclidean norm of X.
            This can more easily be described as ( |X and Y| ) / ( | X or Y | )</remarks>
        </member>
        <member name="M:SimMetricsMetricUtilities.JaccardSimilarity.GetSimilarityExplained(System.String,System.String)">
            <summary> gets a div class xhtml similarity explaining the operation of the metric.</summary>
            <param name="firstWord">string 1</param>
            <param name="secondWord">string 2</param>
            <returns> a div class html section detailing the metric operation.</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.JaccardSimilarity.GetSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            gets the estimated time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the estimated time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.JaccardSimilarity.GetUnnormalisedSimilarity(System.String,System.String)">
            <summary> 
            gets the un-normalised similarity measure of the metric for the given strings.</summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns> returns the score of the similarity measure (un-normalised)</returns>
        </member>
        <member name="P:SimMetricsMetricUtilities.JaccardSimilarity.LongDescriptionString">
            <summary>
            returns the long string identifier for the metric.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.JaccardSimilarity.ShortDescriptionString">
            <summary>
            returns the string identifier for the metric .
            </summary>
        </member>
        <member name="T:SimMetricsMetricUtilities.DiceSimilarity">
            <summary>
            
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.DiceSimilarity.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.DiceSimilarity.#ctor(SimMetricsApi.ITokeniser)">
            <summary>
            constructor
            </summary>
            <param name="tokeniserToUse">the tokeniser to use should a different tokeniser be required</param>
        </member>
        <member name="F:SimMetricsMetricUtilities.DiceSimilarity.estimatedTimingConstant">
            <summary>
            a constant for calculating the estimated timing cost.
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.DiceSimilarity.tokeniser">
            <summary>
            private tokeniser for tokenisation of the query strings.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.DiceSimilarity.GetSimilarity(System.String,System.String)">
            <summary>
            gets the similarity of the two strings using DiceSimilarity
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>a value between 0-1 of the similarity</returns>
            <remarks>Dices coefficient = (2*Common Terms) / (Number of terms in String1 + Number of terms in String2).</remarks>
        </member>
        <member name="M:SimMetricsMetricUtilities.DiceSimilarity.GetSimilarityExplained(System.String,System.String)">
            <summary> gets a div class xhtml similarity explaining the operation of the metric.</summary>
            <param name="firstWord">string 1</param>
            <param name="secondWord">string 2</param>
            <returns> a div class html section detailing the metric operation.</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.DiceSimilarity.GetSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            gets the estimated time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the estimated time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.DiceSimilarity.GetUnnormalisedSimilarity(System.String,System.String)">
            <summary> 
            gets the un-normalised similarity measure of the metric for the given strings.</summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns> returns the score of the similarity measure (un-normalised)</returns>
        </member>
        <member name="P:SimMetricsMetricUtilities.DiceSimilarity.LongDescriptionString">
            <summary>
            returns the long string identifier for the metric.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.DiceSimilarity.ShortDescriptionString">
            <summary>
            returns the string identifier for the metric.
            </summary>
        </member>
        <member name="T:SimMetricsMetricUtilities.SmithWaterman">
            <summary>
            implements the Smith-Waterman edit distance function
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.SmithWaterman.estimatedTimingConstant">
            <summary>
            a constant for calculating the estimated timing cost.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWaterman.#ctor">
            <summary>
            constructor - default (empty).
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWaterman.#ctor(System.Double)">
            <summary>
            constructor
            </summary>
            <param name="costG">the cost of a gap</param>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWaterman.#ctor(System.Double,SimMetricsApi.AbstractSubstitutionCost)">
            <summary>
            constructor
            </summary>
            <param name="costG">the cost of a gap</param>
            <param name="costFunction">the cost function to use</param>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWaterman.#ctor(SimMetricsApi.AbstractSubstitutionCost)">
            <summary>
            constructor
            </summary>
            <param name="costFunction">the cost function to use</param>
        </member>
        <member name="F:SimMetricsMetricUtilities.SmithWaterman.dCostFunction">
            <summary>
            the private cost function used in the levenstein distance.
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.SmithWaterman.gapCost">
            <summary>
            the cost of a gap.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWaterman.GetSimilarity(System.String,System.String)">
            <summary>
            gets the similarity of the two strings using Smith Waterman distance.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>a value between 0-1 of the similarity</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWaterman.GetSimilarityExplained(System.String,System.String)">
            <summary> gets a div class xhtml similarity explaining the operation of the metric.</summary>
            <param name="firstWord">string 1</param>
            <param name="secondWord">string 2</param>
            <returns> a div class html section detailing the metric operation.</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWaterman.GetSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            gets the estimated time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the estimated time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.SmithWaterman.GetUnnormalisedSimilarity(System.String,System.String)">
            <summary> 
            gets the un-normalised similarity measure of the metric for the given strings.</summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns> returns the score of the similarity measure (un-normalised)</returns>
        </member>
        <member name="P:SimMetricsMetricUtilities.SmithWaterman.DCostFunction">
            <summary>
            get the d(i,j) cost function.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.SmithWaterman.GapCost">
            <summary>
            the gap cost for the distance function.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.SmithWaterman.LongDescriptionString">
            <summary>
            returns the long string identifier for the metric.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.SmithWaterman.ShortDescriptionString">
            <summary>
            returns the string identifier for the metric .
            </summary>
        </member>
        <member name="T:SimMetricsUtilities.SubCostRange0To1">
            <summary>
            implements a substitution cost function where d(i,j) = 1 if idoes not equal j, 0 if i equals j.
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.SubCostRange0To1.GetCost(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            get cost between characters where d(i,j) = 1 if i does not equals j, 0 if i equals j.
            </summary>
            <param name="firstWord">the string1 to evaluate the cost</param>
            <param name="firstWordIndex">the index within the string1 to test</param>
            <param name="secondWord">the string2 to evaluate the cost</param>
            <param name="secondWordIndex">the index within the string2 to test</param>
            <returns>the cost of a given subsitution d(i,j) where d(i,j) = 1 if i!=j, 0 if i==j</returns>
        </member>
        <member name="P:SimMetricsUtilities.SubCostRange0To1.MaxCost">
            <summary>
            returns the maximum possible cost.
            </summary>
        </member>
        <member name="P:SimMetricsUtilities.SubCostRange0To1.MinCost">
            <summary>
            returns the minimum possible cost.
            </summary>
        </member>
        <member name="P:SimMetricsUtilities.SubCostRange0To1.ShortDescriptionString">
            <summary>
            returns the name of the cost function.
            </summary>
        </member>
        <member name="T:SimMetricsMetricUtilities.MongeElkan">
            <summary>
            
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.MongeElkan.#ctor">
            <summary>
            basic constructor
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.MongeElkan.#ctor(SimMetricsApi.AbstractStringMetric)">
            <summary>
            constructor taking metric to use
            </summary>
            <param name="metricToUse">the string metric to use</param>
        </member>
        <member name="M:SimMetricsMetricUtilities.MongeElkan.#ctor(SimMetricsApi.ITokeniser)">
            <summary>
            constructor taking a tokeniser to use
            </summary>
            <param name="tokeniserToUse">the tokeniser to use should a different tokeniser be required</param>
        </member>
        <member name="M:SimMetricsMetricUtilities.MongeElkan.#ctor(SimMetricsApi.ITokeniser,SimMetricsApi.AbstractStringMetric)">
            <summary>
            constructor taking a tokeniser and  string metric to use
            </summary>
            <param name="tokeniserToUse">the tokeniser to use should a different tokeniser be required</param>
            <param name="metricToUse">the string metric to use</param>
        </member>
        <member name="F:SimMetricsMetricUtilities.MongeElkan.tokeniser">
            <summary>
            private tokeniser for tokenisation of the query strings.
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.MongeElkan.estimatedTimingConstant">
            <summary>
            a constant for calculating the estimated timing cost.
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.MongeElkan.internalStringMetric">
            <summary>
            private string metric allowing internal metric to be composed.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.MongeElkan.GetSimilarity(System.String,System.String)">
            <summary>
            gets the similarity of the two strings using Monge Elkan.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>a value between 0-1 of the similarity</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.MongeElkan.GetSimilarityExplained(System.String,System.String)">
            <summary> gets a div class xhtml similarity explaining the operation of the metric.</summary>
            <param name="firstWord">string 1</param>
            <param name="secondWord">string 2</param>
            <returns> a div class html section detailing the metric operation.</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.MongeElkan.GetSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            gets the estimated time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the estimated time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.MongeElkan.GetUnnormalisedSimilarity(System.String,System.String)">
            <summary> 
            gets the un-normalised similarity measure of the metric for the given strings.</summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns> returns the score of the similarity measure (un-normalised)</returns>
        </member>
        <member name="P:SimMetricsMetricUtilities.MongeElkan.LongDescriptionString">
            <summary>
            returns the long string identifier for the metric.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.MongeElkan.ShortDescriptionString">
            <summary>
            returns the string identifier for the metric.
            </summary>
        </member>
        <member name="T:SimMetricsMetricUtilities.JaroWinkler">
            <summary>
            implements the Jaro Winkler string metric
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.JaroWinkler.minPrefixTestLength">
            <summary>
            maximum prefix length to use.
            </summary>
            <remarks>changed from the original 6 to 4 to match the original definition of JaroWinkler
            Chris Parkinson .NET 2.0 implementation only</remarks>
        </member>
        <member name="F:SimMetricsMetricUtilities.JaroWinkler.prefixAdustmentScale">
            <summary>
            prefix adjustment scale.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.JaroWinkler.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.JaroWinkler.estimatedTimingConstant">
            <summary>
            a constant for calculating the estimated timing cost.
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.JaroWinkler.jaroStringMetric">
            <summary>
            private string metric allowing internal metric to be composed.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.JaroWinkler.GetSimilarity(System.String,System.String)">
            <summary>
            gets the similarity measure of the JaroWinkler metric for the given strings.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>0-1 similarity measure of the JaroWinkler metric</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.JaroWinkler.GetSimilarityExplained(System.String,System.String)">
            <summary> gets a div class xhtml similarity explaining the operation of the metric.</summary>
            <param name="firstWord">string 1</param>
            <param name="secondWord">string 2</param>
            <returns> a div class html section detailing the metric operation.</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.JaroWinkler.GetSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            gets the estimated time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the estimated time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.JaroWinkler.GetUnnormalisedSimilarity(System.String,System.String)">
            <summary> 
            gets the un-normalised similarity measure of the metric for the given strings.</summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns> returns the score of the similarity measure (un-normalised)</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.JaroWinkler.GetPrefixLength(System.String,System.String)">
            <summary>
            gets the prefix length found of common characters at the begining of the strings.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the prefix length found of common characters at the begining of the strings</returns>
        </member>
        <member name="P:SimMetricsMetricUtilities.JaroWinkler.LongDescriptionString">
            <summary>
            returns the long string identifier for the metric.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.JaroWinkler.ShortDescriptionString">
            <summary>
            returns the string identifier for the metric.
            </summary>
        </member>
        <member name="T:SimMetricsUtilities.TokeniserUtilities`1">
            <summary>
            class containing utility functions for the tokenisers to use. 
            these are in two main version
            collections or sets
            a collection can contain the same value multiple times ad set can only have the value once.
            </summary>
            <typeparam name="T">type for token collection</typeparam>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserUtilities`1.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserUtilities`1.CommonSetTerms">
            <summary>
            returns the number of common tokens from the two supplied token sets
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserUtilities`1.CommonTerms">
            <summary>
            returns number of common tokens from the two supplied token collections
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserUtilities`1.CreateMergedList(System.Collections.ObjectModel.Collection{`0},System.Collections.ObjectModel.Collection{`0})">
            <summary>
             method to merge two token lists to keep all tokens
            </summary>
            <param name="firstTokens">first token list</param>
            <param name="secondTokens">second token list</param>
            <returns>list of all tokens</returns>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserUtilities`1.CreateMergedSet(System.Collections.ObjectModel.Collection{`0},System.Collections.ObjectModel.Collection{`0})">
            <summary>
             method to merge two token lists to keep only unique tokens
            </summary>
            <param name="firstTokens">first token list</param>
            <param name="secondTokens">second token list</param>
            <returns>list of unique tokens</returns>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserUtilities`1.CreateSet(System.Collections.ObjectModel.Collection{`0})">
            <summary>
             method to create a single token list of unique tokens
            </summary>
            <param name="tokenList">token list to use</param>
            <returns>unique token list - sorted</returns>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserUtilities`1.MergeIntoSet(System.Collections.ObjectModel.Collection{`0})">
            <summary>
            method for merging extra token lists into the set
            </summary>
            <param name="firstTokens">token list to merge</param>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserUtilities`1.MergeLists(System.Collections.ObjectModel.Collection{`0})">
            <summary>
            method for merging into the list
            </summary>
            <param name="firstTokens">token list to merge</param>
        </member>
        <member name="P:SimMetricsUtilities.TokeniserUtilities`1.FirstSetTokenCount">
            <summary>
            token count from first token list
            </summary>
        </member>
        <member name="P:SimMetricsUtilities.TokeniserUtilities`1.FirstTokenCount">
            <summary>
            token count from first token list
            </summary>
        </member>
        <member name="P:SimMetricsUtilities.TokeniserUtilities`1.MergedTokens">
            <summary>
            merged token List. unique tokens only
            </summary>
        </member>
        <member name="P:SimMetricsUtilities.TokeniserUtilities`1.SecondSetTokenCount">
            <summary>
            token count from second token list
            </summary>
        </member>
        <member name="P:SimMetricsUtilities.TokeniserUtilities`1.SecondTokenCount">
            <summary>
            token count from second token list
            </summary>
        </member>
        <member name="P:SimMetricsUtilities.TokeniserUtilities`1.TokenSet">
            <summary>
            merged token List. unique tokens only
            </summary>
        </member>
        <member name="T:SimMetricsMetricUtilities.QGramsDistance">
            <summary>
            implements a QGram distance metric using supplied QGRam tokeniser
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.QGramsDistance.#ctor">
            <summary>
            constructor - default (empty).
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.QGramsDistance.#ctor(SimMetricsApi.ITokeniser)">
            <summary>
            the tokeniser to use; should a different tokeniser be required
            </summary>
            <param name="tokeniserToUse"></param>
        </member>
        <member name="F:SimMetricsMetricUtilities.QGramsDistance.estimatedTimingConstant">
            <summary>
            a constant for calculating the estimated timing cost.
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.QGramsDistance.tokenUtilities">
            <summary>
            
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.QGramsDistance.tokeniser">
            <summary>
            tokeniser for tokenisation of the query strings.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.QGramsDistance.GetSimilarity(System.String,System.String)">
            <summary>
            gets the similarity of the two strings using QGramsDistance.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>a value between 0-1 of the similarity</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.QGramsDistance.GetSimilarityExplained(System.String,System.String)">
            <summary> gets a div class xhtml similarity explaining the operation of the metric.</summary>
            <param name="firstWord">string 1</param>
            <param name="secondWord">string 2</param>
            <returns> a div class html section detailing the metric operation.</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.QGramsDistance.GetSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            gets the estimated time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the estimated time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.QGramsDistance.GetUnnormalisedSimilarity(System.String,System.String)">
            <summary> 
            gets the un-normalised similarity measure of the metric for the given strings.</summary>
            <param name="firstWord">first word</param>
            <param name="secondWord">second word</param>
            <returns> returns the score of the similarity measure (un-normalised)</returns>
        </member>
        <member name="P:SimMetricsMetricUtilities.QGramsDistance.LongDescriptionString">
            <summary>
            returns the long string identifier for the metric.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.QGramsDistance.ShortDescriptionString">
            <summary>
            returns the string identifier for the metric.
            </summary>
        </member>
        <member name="T:SimMetricsUtilities.TokeniserWhitespace">
            <summary>
            implements a simple whitespace tokeniser. 
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserWhitespace.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:SimMetricsUtilities.TokeniserWhitespace.delimiters">
            <summary>
            private delimiters for white space within a string.
            </summary>
        </member>
        <member name="F:SimMetricsUtilities.TokeniserWhitespace.stopWordHandler">
            <summary>
            stopWordHandler used by the tokenisation.
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserWhitespace.Tokenize(System.String)">
            <summary>
            Return tokenized version of a string.
            </summary>
            <param name="word">word to tokenize</param>
            <returns>tokenized version of a string</returns>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserWhitespace.TokenizeToSet(System.String)">
            <summary>
            Return tokenized set of a string.
            </summary>
            <param name="word">input</param>
            <returns>tokenized set of a string</returns>
        </member>
        <member name="P:SimMetricsUtilities.TokeniserWhitespace.Delimiters">
            <summary>
            displays the delimiters used.
            </summary>
        </member>
        <member name="P:SimMetricsUtilities.TokeniserWhitespace.ShortDescriptionString">
            <summary>
            displays the tokenisation method.
            </summary>
        </member>
        <member name="P:SimMetricsUtilities.TokeniserWhitespace.StopWordHandler">
            <summary>
            gets the stop word handler used.
            </summary>
        </member>
        <member name="T:SimMetricsUtilities.AffineGapRange5To0Multiplier1">
            <summary>
            implements a affine gap cost function.
            </summary>
        </member>
        <member name="F:SimMetricsUtilities.AffineGapRange5To0Multiplier1.charExactMatchScore">
            <summary>
            
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.AffineGapRange5To0Multiplier1.GetCost(System.String,System.Int32,System.Int32)">
            <summary>
            get cost between characters.
            </summary>
            <param name="textToGap">the string to get the cost of a gap</param>
            <param name="stringIndexStartGap">the index within the string to test a start gap from</param>
            <param name="stringIndexEndGap">the index within the string to test a end gap to</param>
            <returns>the cost of a Gap G</returns>
        </member>
        <member name="P:SimMetricsUtilities.AffineGapRange5To0Multiplier1.MaxCost">
            <summary>
            returns the maximum possible cost.
            </summary>
        </member>
        <member name="P:SimMetricsUtilities.AffineGapRange5To0Multiplier1.MinCost">
            <summary>
            returns the minimum possible cost.
            </summary>
        </member>
        <member name="P:SimMetricsUtilities.AffineGapRange5To0Multiplier1.ShortDescriptionString">
            <summary>
            returns the name of the cost function.
            </summary>
        </member>
        <member name="T:SimMetricsUtilities.AffineGapRange1To0Multiplier1Over3">
            <summary>
            implements a Affine Gap cost function.
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.AffineGapRange1To0Multiplier1Over3.GetCost(System.String,System.Int32,System.Int32)">
            <summary>
            get cost between characters.
            </summary>
            <param name="textToGap">the string to get the cost of a gap</param>
            <param name="stringIndexStartGap">the index within the string to test a start gap from</param>
            <param name="stringIndexEndGap">the index within the string to test a end gap to</param>
            <returns>the cost of a Gap G</returns>
        </member>
        <member name="P:SimMetricsUtilities.AffineGapRange1To0Multiplier1Over3.MaxCost">
            <summary>
            returns the maximum possible cost.
            </summary>
        </member>
        <member name="P:SimMetricsUtilities.AffineGapRange1To0Multiplier1Over3.MinCost">
            <summary>
            returns the minimum possible cost.
            </summary>
        </member>
        <member name="P:SimMetricsUtilities.AffineGapRange1To0Multiplier1Over3.ShortDescriptionString">
            <summary>
            returns the name of the cost function.
            </summary>
        </member>
        <member name="T:SimMetricsMetricUtilities.MatchingCoefficient">
            <summary>
            
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.MatchingCoefficient.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.MatchingCoefficient.#ctor(SimMetricsApi.ITokeniser)">
            <summary>
            the tokeniser to use should a different tokeniser be required
            </summary>
            <param name="tokeniserToUse"></param>
        </member>
        <member name="F:SimMetricsMetricUtilities.MatchingCoefficient.estimatedTimingConstant">
            <summary>
            a constant for calculating the estimated timing cost.
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.MatchingCoefficient.tokeniser">
            <summary>
            private tokeniser for tokenisation of the query strings.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.MatchingCoefficient.GetSimilarity(System.String,System.String)">
            <summary>
            gets the similarity of the two strings using MatchingCoefficient.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>a value between 0-1 of the similarity</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.MatchingCoefficient.GetSimilarityExplained(System.String,System.String)">
            <summary> gets a div class xhtml similarity explaining the operation of the metric.</summary>
            <param name="firstWord">string 1</param>
            <param name="secondWord">string 2</param>
            <returns> a div class html section detailing the metric operation.</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.MatchingCoefficient.GetSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            gets the estimated time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the estimated time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.MatchingCoefficient.GetUnnormalisedSimilarity(System.String,System.String)">
            <summary> 
            gets the un-normalised similarity measure of the metric for the given strings.</summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns> returns the score of the similarity measure (un-normalised)</returns>
        </member>
        <member name="P:SimMetricsMetricUtilities.MatchingCoefficient.LongDescriptionString">
            <summary>
            returns the long string identifier for the metric.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.MatchingCoefficient.ShortDescriptionString">
            <summary>
            returns the string identifier for the metric .
            </summary>
        </member>
        <member name="T:SimMetricsUtilities.SubCostRange1ToMinus2">
            <summary>
            implements a substitution cost function where d(i,j) = 1 if i does not equal j, -2 if i equals j.
            </summary>
        </member>
        <member name="F:SimMetricsUtilities.SubCostRange1ToMinus2.charExactMatchScore">
            <summary>
            
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.SubCostRange1ToMinus2.GetCost(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            get cost between characters where d(i,j) = 1 if i does not equal j, -2 if i equals j.
            </summary>
            <param name="firstWord">the string1 to evaluate the cost</param>
            <param name="firstWordIndex">the index within the string1 to test</param>
            <param name="secondWord">the string2 to evaluate the cost</param>
            <param name="secondWordIndex">the index within the string2 to test</param>
            <returns>the cost of a given subsitution d(i,j) where d(i,j) = 1 if i!=j, -2 if i==j</returns>
        </member>
        <member name="P:SimMetricsUtilities.SubCostRange1ToMinus2.MaxCost">
            <summary>
            returns the maximum possible cost.
            </summary>
        </member>
        <member name="P:SimMetricsUtilities.SubCostRange1ToMinus2.MinCost">
            <summary>
            returns the minimum possible cost.
            </summary>
        </member>
        <member name="P:SimMetricsUtilities.SubCostRange1ToMinus2.ShortDescriptionString">
            <summary>
            returns the name of the cost function.
            </summary>
        </member>
        <member name="T:SimMetricsMetricUtilities.BlockDistance">
             <summary>
            a block distance implementation metric 
             </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.BlockDistance.#ctor">
            <summary>
            constructor - default (empty).
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.BlockDistance.#ctor(SimMetricsApi.ITokeniser)">
            <summary>
            constructor
            </summary>
            <param name="tokeniserToUse">the tokeniser to use should a different tokeniser be required</param>
        </member>
        <member name="F:SimMetricsMetricUtilities.BlockDistance.estimatedTimingConstant">
            <summary>
            a constant for calculating the estimated timing cost.
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.BlockDistance.tokenUtilities">
            <summary>
            
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.BlockDistance.tokeniser">
            <summary>
            tokeniser for tokenisation of the query strings.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.BlockDistance.GetSimilarity(System.String,System.String)">
            <summary>
            gets the similarity of the two strings using BlockDistance.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>a 0-1 similarity score</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.BlockDistance.GetSimilarityExplained(System.String,System.String)">
            <summary>
            gets a div class xhtml similarity explaining the operation of the metric. 
            </summary>
            <param name="firstWord">string 1</param>
            <param name="secondWord">string 2</param>
            <returns> a div class html section detailing the metric operation.</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.BlockDistance.GetSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            gets the estimated time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord">string 1</param>
            <param name="secondWord">string 2</param>
            <returns>the estimated time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.BlockDistance.GetUnnormalisedSimilarity(System.String,System.String)">
            <summary> 
            gets the un-normalised similarity measure of the metric for the given strings.</summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns> returns the score of the similarity measure (un-normalised)</returns>
        </member>
        <member name="P:SimMetricsMetricUtilities.BlockDistance.LongDescriptionString">
            <summary>
            returns the long string identifier for the metric.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.BlockDistance.ShortDescriptionString">
            <summary>
            returns the string identifier for the metric.
            </summary>
        </member>
        <member name="T:SimMetricsMetricUtilities.NeedlemanWunch">
            <summary>
            needlemanwunch implements an edit distance function
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.NeedlemanWunch.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.NeedlemanWunch.#ctor(System.Double)">
            <summary>
            constructor
            </summary>
            <param name="costG">the cost of a gap</param>
        </member>
        <member name="M:SimMetricsMetricUtilities.NeedlemanWunch.#ctor(System.Double,SimMetricsApi.AbstractSubstitutionCost)">
            <summary>
            constructor
            </summary>
            <param name="costG">the cost of a gap</param>
            <param name="costFunction">the cost function to use</param>
        </member>
        <member name="M:SimMetricsMetricUtilities.NeedlemanWunch.#ctor(SimMetricsApi.AbstractSubstitutionCost)">
            <summary>
            constructor
            </summary>
            <param name="costFunction">the cost function to use</param>
        </member>
        <member name="F:SimMetricsMetricUtilities.NeedlemanWunch.dCostFunction">
            <summary>
            the private cost function used in the levenstein distance.
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.NeedlemanWunch.estimatedTimingConstant">
            <summary>
            a constant for calculating the estimated timing cost.
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.NeedlemanWunch.gapCost">
            <summary>
            the cost of a gap.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.NeedlemanWunch.GetSimilarity(System.String,System.String)">
            <summary>
            gets the similarity of the two strings using Needleman Wunch distance.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>a value between 0-1 of the similarity</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.NeedlemanWunch.GetSimilarityExplained(System.String,System.String)">
            <summary> gets a div class xhtml similarity explaining the operation of the metric.</summary>
            <param name="firstWord">string 1</param>
            <param name="secondWord">string 2</param>
            <returns> a div class html section detailing the metric operation.</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.NeedlemanWunch.GetSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            gets the estimated time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the estimated time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.NeedlemanWunch.GetUnnormalisedSimilarity(System.String,System.String)">
            <summary> 
            gets the un-normalised similarity measure of the metric for the given strings.</summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns> returns the score of the similarity measure (un-normalised)</returns>
        </member>
        <member name="P:SimMetricsMetricUtilities.NeedlemanWunch.DCostFunction">
            <summary>
            set/get the d(i,j) cost function.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.NeedlemanWunch.GapCost">
            <summary>
            sets/gets the gap cost for the distance function.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.NeedlemanWunch.LongDescriptionString">
            <summary>
            returns the long string identifier for the metric.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.NeedlemanWunch.ShortDescriptionString">
            <summary>
            returns the string identifier for the metric.
            </summary>
        </member>
        <member name="T:SimMetricsMetricUtilities.Levenstein">
            <summary>
            levenstein implements the levenstein distance function.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.Levenstein.#ctor">
            <summary>
            constructor to load dummy Java converter classes only
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.Levenstein.dCostFunction">
            <summary>
            the private cost function used in the levenstein distance.
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.Levenstein.estimatedTimingConstant">
            <summary>
            a constant for calculating the estimated timing cost.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.Levenstein.GetSimilarity(System.String,System.String)">
            <summary>
            gets the similarity of the two strings using levenstein distance.
            </summary>
            <param name="firstWord">first word</param>
            <param name="secondWord">second word</param>
            <returns>a value between 0-1 of the similarity</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.Levenstein.GetSimilarityExplained(System.String,System.String)">
            <summary> gets a div class xhtml similarity explaining the operation of the metric.</summary>
            <param name="firstWord">string 1</param>
            <param name="secondWord">string 2</param>
            <returns> a div class html section detailing the metric operation.
            </returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.Levenstein.GetSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            gets the estimated time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord"></param>                                                  
            <param name="secondWord"></param>
            <returns>the estimated time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.Levenstein.GetUnnormalisedSimilarity(System.String,System.String)">
            <summary> 
            gets the un-normalised similarity measure of the metric for the given strings.</summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns> returns the score of the similarity measure (un-normalised)</returns>
            <remarks>
            <p/>
            Copy character from string1 over to string2 (cost 0)
            Delete a character in string1 (cost 1)
            Insert a character in string2 (cost 1)
            Substitute one character for another (cost 1)
            <p/>
            D(i-1,j-1) + d(si,tj) //subst/copy
            D(i,j) = min D(i-1,j)+1 //insert
            D(i,j-1)+1 //delete
            <p/>
            d(i,j) is a function whereby d(c,d)=0 if c=d, 1 else.
            </remarks>
        </member>
        <member name="P:SimMetricsMetricUtilities.Levenstein.LongDescriptionString">
            <summary>
            returns the long string identifier for the metric.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.Levenstein.ShortDescriptionString">
            <summary>
            returns the string identifier for the metric.
            </summary>
        </member>
        <member name="T:SimMetricsUtilities.TokeniserSGram2Extended">
            <summary>
            implementation of a SGram tokeniser using extended logic
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserSGram2Extended.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.TokeniserSGram2Extended.ToString">
            <summary>
            override the ToString method to give accurate information on current settings
            </summary>
            <returns>details of current tokeniser</returns>
        </member>
        <member name="P:SimMetricsUtilities.TokeniserSGram2Extended.ShortDescriptionString">
            <summary>
            displays the tokenisation method.
            </summary>
        </member>
        <member name="T:SimMetricsUtilities.SubCostRange5ToMinus3">
            <summary>
            SubCostRange5ToMinus3 implements a cost function as used in Monge Elkan where by an exact match
            no match or an approximate match whereby a set of characters are in an approximate range.
            for pairings in {dt} {gj} {lr} {mn} {bpv} {aeiou} {,.}
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.SubCostRange5ToMinus3.#ctor">
            <summary>
            constructor
            Sets up the matching sets
            approximate match = +3,
            for pairings in {dt} {gj} {lr} {mn} {bpv} {aeiou} {,.}.
            </summary>
        </member>
        <member name="F:SimMetricsUtilities.SubCostRange5ToMinus3.approx">
            <summary>
            approximate character set.
            </summary>
        </member>
        <member name="M:SimMetricsUtilities.SubCostRange5ToMinus3.GetCost(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            get cost between characters where
            d(i,j) = charExactMatchScore if i equals j,
            charApproximateMatchScore if i approximately equals j or
            charMismatchMatchScore if i does not equal j.
            </summary>
            <param name="firstWord">the string1 to evaluate the cost</param>
            <param name="firstWordIndex">the index within the string1 to test</param>
            <param name="secondWord">the string2 to evaluate the cost</param>
            <param name="secondWordIndex">the index within the string2 to test</param>
            <returns>the cost of a given subsitution d(i,j) as defined above</returns>
        </member>
        <member name="P:SimMetricsUtilities.SubCostRange5ToMinus3.MaxCost">
            <summary>
            returns the maximum possible cost.
            </summary>
        </member>
        <member name="P:SimMetricsUtilities.SubCostRange5ToMinus3.MinCost">
            <summary>
            returns the minimum possible cost.
            </summary>
        </member>
        <member name="P:SimMetricsUtilities.SubCostRange5ToMinus3.ShortDescriptionString">
            <summary>
            returns the name of the cost function.
            </summary>
        </member>
        <member name="T:SimMetricsMetricUtilities.Jaro">
            <summary>
            implements the Jaro string Metric.
            </summary>
        </member>
        <member name="F:SimMetricsMetricUtilities.Jaro.estimatedTimingConstant">
            <summary>
            a constant for calculating the estimated timing cost.
            </summary>
        </member>
        <member name="M:SimMetricsMetricUtilities.Jaro.GetSimilarity(System.String,System.String)">
            <summary>
            gets the similarity of the two strings using Jaro distance.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>a value between 0-1 of the similarity</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.Jaro.GetSimilarityExplained(System.String,System.String)">
            <summary> gets a div class xhtml similarity explaining the operation of the metric.</summary>
            <param name="firstWord">string 1</param>
            <param name="secondWord">string 2</param>
            <returns> a div class html section detailing the metric operation.</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.Jaro.GetSimilarityTimingEstimated(System.String,System.String)">
            <summary>
            gets the estimated time in milliseconds it takes to perform a similarity timing.
            </summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns>the estimated time in milliseconds taken to perform the similarity measure</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.Jaro.GetUnnormalisedSimilarity(System.String,System.String)">
            <summary> 
            gets the un-normalised similarity measure of the metric for the given strings.</summary>
            <param name="firstWord"></param>
            <param name="secondWord"></param>
            <returns> returns the score of the similarity measure (un-normalised)</returns>
        </member>
        <member name="M:SimMetricsMetricUtilities.Jaro.GetCommonCharacters(System.String,System.String,System.Int32)">
            <summary>
            returns a string buffer of characters from string1 within string2 if they are of a given
            distance seperation from the position in string1.
            </summary>
            <param name="firstWord">string one</param>
            <param name="secondWord">string two</param>
            <param name="distanceSep">separation distance</param>
            <returns>a string buffer of characters from string1 within string2 if they are of a given
            distance seperation from the position in string1</returns>
        </member>
        <member name="P:SimMetricsMetricUtilities.Jaro.LongDescriptionString">
            <summary>
            returns the long string identifier for the metric.
            </summary>
        </member>
        <member name="P:SimMetricsMetricUtilities.Jaro.ShortDescriptionString">
            <summary>
            returns the string identifier for the metric.
            </summary>
        </member>
    </members>
</doc>

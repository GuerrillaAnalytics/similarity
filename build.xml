<project name="Similarity" default="projecthelp" > 
<!-- 
	Project build file
-->	

<!-- **********************************************************************-->
<!-- Project directories -->
<!-- **********************************************************************-->
<property name="dir.src" location="src"/>		<!-- source code 			-->
<property name="dir.build" location="build"/>	<!-- build folder			-->
<property name="dir.dist"  location="dist"/>	<!-- distribution folder 	-->


<!-- Read properties file for build settings -->
<property file="build.properties" />

<!-- *****************************************************************
Semantic versioning properties
-->
<property name="semantic.version" value="${major.version}.${minor.version}.${patch.version}"/>
<property name="file.dist" value="${ant.project.name}-${semantic.version}.zip"/>




<target name="init" 
	description="Create the project folder structure for executing project build">
	<!-- Create the build directory structure used by compile -->
	<mkdir dir="${dir.build}"/>
	<mkdir dir="${dir.dist}"/>
	
</target>

<target name="clean" depends="init"
	description="Clean up temp folders and files" >
	<!-- Clean up build folder 	-->
	<delete includeEmptyDirs="true">
		<fileset dir="${dir.build}">
			<include name="*/**" />
		</fileset>
		<fileset dir="${dir.dist}">
			<include name="*/**" />
		</fileset>
	</delete>
	
</target>

<target name="build" description="Build everything from scratch" depends="copy">

	<!-- Replace major version in schema names -->
	<replace 
		dir="${dir.build}\"
		includes="**/*.SQL **/*.sql **/*.cs"
		value="defaultvalue"
		>
	  <replacefilter 
		token="@MAJOR.VERSION@" 
		value="${major.version}"/>
	</replace>

	<!-- Replace minor version in schema names -->
	<replace 
		dir="${dir.build}\"
		includes="**/*.SQL **/*.sql **/*.cs"
		value="defaultvalue"
		>
	  <replacefilter 
		token="@MINOR.VERSION@" 
		value="${minor.version}"/>
	</replace>

	<!-- Replace patch version in schema names -->
	<replace 
		dir="${dir.build}\"
		includes="**/*.SQL **/*.sql **/*.cs"
		value="defaultvalue"
		>
	  <replacefilter 
		token="@PATCH.VERSION@" 
		value="${patch.version}"/>
	</replace>

	
	<echo message="Creating the ashex.exe program"/>
	<antcall target="build_ashex">
	</antcall>
	
	<echo message=""/>
	<echo message="Compiling the SimMetrics DLL"/>
	<antcall target="build_simmetrics_dll">
	</antcall>
	
	<echo message=""/>
	<echo message="Compiling the Similarity DLL"/>
	<antcall target="build_similarity_dll">
	</antcall>

	<echo message=""/>
	<echo message="Converting original SimMetrics DLL to hex"/>	
	<ashex dllFile="${dir.build}/SIMMETRICS_1_5_0.dll" hexFile="${dir.build}/SIMMETRICS_1_5_0.dll.HEX" />
	
	<echo message=""/>
	<echo message="Converting Similarity DLL to hex"/>
	<ashex dllFile="${dir.build}/SIMILARITY_001_00.dll" hexFile="${dir.build}/SIMILARITY_001_00.dll.HEX" />
	
	<echo message=""/>
	<echo message="Replacing new hex code in SQL files"/>	
	<antcall target="update_hex">
	</antcall>
	
	
	
</target>

<target name="dist" depends="build"
	description="Generate the distribution zip file" >

		<!-- Clean up build folder 	-->
	<delete includeEmptyDirs="true">
		<fileset dir="${dir.dist}">
			<include name="*/**" />
		</fileset>

	</delete>
	
	<!--	Create version info file that application may use -->
    <tstamp>
        <format property="built_at" pattern="yyyy-MM-dd hh:mm"/>
    </tstamp>        
	
	<!-- zip up files into a distribution archive -->
	<echo message="Zipping up all files in the build folder" />
	<zip destfile="${dir.dist}/${file.dist}"
	   basedir="${dir.build}"
	   update="false"
	   excludes="**/*.hex **/*.HEX"
	   includes="**/*.sql **/*.SQL"
	   comment="${ant.project.name}-${semantic.version}"
	/>
  
</target>


<target name="install" description="Installs functions onto database. Assumes distribution archive in dist folder" >
	
	<echo message="Extracting into tmp folder"/>	
	<delete dir="${dir.dist}/tmp" failonerror="false"/>
	<unzip src="${dir.dist}/${file.dist}" dest="${dir.dist}/tmp"/>

	<echo message="Loading the Similarity DLL into target database"/>
	<antcall target="load_onto_database">
	<param name="baseDir" value="$${dir.dist}/tmp"/>
	</antcall>	
</target>

	
<!--
Copy all files into the build folder in preparation for building
-->
<target name="copy" depends="clean">
	<copy todir="${dir.build}">
		 <fileset dir="${dir.src}">
			 <include name="**/**"/>
		 </fileset>
	</copy>
	
</target>

<!--
Replace placeholder with hex string for both DLLs
-->
<target name="update_hex" >
	
	<!-- insert the hex string into the Simmetrics DLL load	-->
	<echo message="Inserting hex string for Simmetrics DLL"/>
    <loadfile property="simmetrics.hex.value"
      srcFile="${dir.build}\SIMMETRICS_1_5_0.dll.HEX"/>
	
	<replace 
		file="${dir.build}\100_install\1200_CREATE_ASSEMBLIES.SQL"
		value="defaultvalue"
		>
	  <replacefilter 
		token="@SIMMETRICS_DLL@" 
		value="${simmetrics.hex.value}"/>
	</replace>

	
	<!-- insert the hex string into the Similarity DLL load	-->
	<echo message="Inserting hex string for Similarity DLL"/>
    <loadfile property="similarity.hex.value"
      srcFile="${dir.build}/SIMILARITY_001_00.dll.HEX"/>
	 
	<replace 
		file="${dir.build}/100_install/1200_CREATE_ASSEMBLIES.SQL"
		value="defaultvalue"
		>
	  <replacefilter 
		token="@SIMILARITY_DLL@" 
		value="${similarity.hex.value}"/>
	</replace>
</target>

<!--
COMPILE THE SQL SERVER WRAPPER FUNCTIONS INTO A DLL
This is the SQL Server Assembly DLL that wrap around the Simmetrics DLL
See examples here:
https://msdn.microsoft.com/en-us/library/ms379563(v=vs.80).aspx
-->
<target name="build_similarity_dll" description="Builds the Similarity DLL. Use when writing updates to the Similarity C sharp code" >
	<sequential> 
		 	
	<exec executable="${csc.exe}" failonerror="true" >
			<arg value="/reference:${dir.build}/SIMMETRICS_1_5_0.dll"/>
			<arg value="/target:library"/>						
			<arg value="/out:${dir.build}/SIMILARITY_001_00.dll"/>

			<arg value="/recurse:${dir.build}\030_BUILD_SIMILARITY\030_DLL\*.cs"/>
	</exec>
	
	</sequential> 
	
</target>


<target name="build_simmetrics_dll" description="Builds the SimMetrics DLL" >
	<sequential> 
	
	<echo message="Creating DLL in ${dir.build}/SIMMETRICS_1_5_0.dll" />	
	<exec executable="${csc.exe}" failonerror="true" >
			<arg value="/target:library"/>						
			<arg value="/out:${dir.build}/SIMMETRICS_1_5_0.dll"/>

			<arg value="/recurse:${dir.build}\020_SIMMETRICS\src\*.cs"/>
	</exec>
	
	</sequential> 
	
</target>

<!--
Execute SQL files to load DLL into database
Expects: base directory 
-->
<target name="load_onto_database"  >
	
	<sequential>
		<macro_sqlcmd file="${baseDir}/100_install/1000_DROP_ASSEMBLIES.SQL" />
		<macro_sqlcmd file="${baseDir}/100_install/1200_CREATE_ASSEMBLIES.SQL" />
		<macro_sqlcmd file="${baseDir}/100_install/2000_TESTS.SQL" />
	</sequential> 
	<echo message="-----------------------------------------------------"/>
	<echo message=""/>	
</target>

<!--
Create the ashex executable for creating hex string from a DLL
-->
<target name="build_ashex" description="Compile the ashex.exe program for hex conversion. Use when developing the ashex C Sharp code" >
	<sequential> 
		<vcs_compiler 	dirInput="${dir.build}/030_BUILD_SIMILARITY/010_ashex" 
						dirOutput="${dir.build}"/> 
	</sequential> 
		
</target>

<!-- *************************************************************** -->
<!-- 
C Sharp compiler 
%CSC% /out:%BIN_FOLDER%\ashex.exe %SRC_FOLDER%\030_BUILD_SIMILARITY\010_HEXIFY\ashex.cs 
-->
<!-- *************************************************************** -->	
<macrodef name="vcs_compiler" description="VCS .Net compile a directory of code">
	<attribute name="dirInput" description="Code directory to compile"/>
	<attribute name="dirOutput" description="Directory to write output into"/>
	<sequential>
		<apply executable="${csc.exe}"  parallel="false">
			<arg value="/out:@{dirOutput}/ashex.exe"/>		
			<fileset dir="@{dirInput}" includes="*.cs" erroronmissingdir="true">
			</fileset>
		</apply>
	</sequential>
</macrodef>

<!-- 
Note that ashex is wrapped in a batch script. I couldn't successfully pass the greater than
and less than arguments from Ant
-->
<macrodef name="ashex" description="Execute the ashed tool and convert a DLL to a hex file">
	<attribute name="dllFile" description="The dll file to convert"/>
	<attribute name="hexFile" description="The target hex file to output"/>
		
	<sequential>
		<exec executable="${dir.build}/scripts/run_ashex.bat" failonerror="true">
			<arg value="@{dllFile}"/>
			<arg value="@{hexFile}"/>	
		</exec>
	</sequential>
</macrodef>



  
<!-- 
Default into help info
-->	
<target name="projecthelp" >
	<echo message="Project: ${ant.project.name}" />
	<echo message="Version: ${semantic.version}" />
	<echo message="Licence: GNU GENERAL PUBLIC LICENSE v3. See LICENCE.txt for details" />
	<echo message="" />
	<java classname="org.apache.tools.ant.Main">
	  <arg value="-projecthelp" />
	  <arg value="-buildfile" />
	 <arg value="${ant.file}" />
	</java>
</target>



	  
<!--	
This macro assumes a trusted connection to SQL Server
-->
<macrodef name="macro_sqlcmd" description="SQLCMD macro">

<attribute name="file" description="SQL code file to execute"/>

<sequential>
	<echo message="-----------------------------------------------------"/> 
	<!-- output some messages about what we're doing	-->
	<echo message=" "/> 	
	<echo message="@{file}"/> 	
	
	<exec executable="${sqlserver.cmd}" failonerror="true">
		<!-- 
		sqlcmd has to have quoted identifiers switched on, regardless of what is
		written in your scripts
		http://www.brandonmartinez.com/2013/06/18/sql-delete-or-insert-fail-with-incorrect-quoted_identifier-set-options/
		-->
		<arg value="-I"/>
		<arg value="-b"/>		<!-- On error, batch report -->
		<arg value="-e"/>		<!-- Echo input -->
		<arg value="-d"/>		<!-- Database name-->
		<arg value="${db.database}"/> 

		<!-- Server -->
		<arg value="-S"/>		
		<arg value="${db.machine}\${db.instance}"/>
		
		<!-- Input file  -->
		<arg value="-i"/>
		<arg value="@{file}"/>	
		
		<!-- output log -->
		<arg value="-o"/>
		<arg value="${dir.build}/sql.log"/>
	</exec>


	<echo message=" "/> 
</sequential>
</macrodef>
		
</project>